# ===================================================================
# Spring Boot configuration for the "prod" profile.
#
# This configuration overrides the application.yml file.
#
# More information on profiles: https://www.jhipster.tech/profiles/
# More information on configuration properties: https://www.jhipster.tech/common-application-properties/
# ===================================================================

# ===================================================================
# Standard Spring Boot properties.
# Full reference is available at:
# http://docs.spring.io/spring-boot/docs/current/reference/html/common-application-properties.html
# ===================================================================

logging:
  level:
    ROOT: INFO
    io.github.jhipster: INFO
    de.trustable.ca3s.acmeproxy: INFO

management:
  metrics:
    export:
      prometheus:
        enabled: false

spring:
  mail:
    host: localhost
    port: 25
    username:
    password:
  thymeleaf:
    cache: true

# ===================================================================
# To enable TLS in production, generate a certificate using:
# keytool -genkey -alias ca3sacmeproxy -storetype PKCS12 -keyalg RSA -keysize 2048 -keystore keystore.p12 -validity 3650
#
# You can also use Let's Encrypt:
# https://maximilian-boehm.com/hp2121/Create-a-Java-Keystore-JKS-from-Let-s-Encrypt-Certificates.htm
#
# Then, modify the server.ssl properties so your "server" configuration looks like:
#
# server:
#   port: 443
#   ssl:
#     key-store: classpath:config/tls/keystore.p12
#     key-store-password: password
#     key-store-type: PKCS12
#     key-alias: selfsigned
#     # The ciphers suite enforce the security by deactivating some old and deprecated SSL cipher, this list was tested against SSL Labs (https://www.ssllabs.com/ssltest/)
#     ciphers: TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384 ,TLS_DHE_RSA_WITH_AES_128_GCM_SHA256 ,TLS_DHE_RSA_WITH_AES_256_GCM_SHA384 ,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384,TLS_DHE_RSA_WITH_AES_128_CBC_SHA256,TLS_DHE_RSA_WITH_AES_128_CBC_SHA,TLS_DHE_RSA_WITH_AES_256_CBC_SHA256,TLS_DHE_RSA_WITH_AES_256_CBC_SHA,TLS_RSA_WITH_AES_128_GCM_SHA256,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_CBC_SHA256,TLS_RSA_WITH_AES_256_CBC_SHA256,TLS_RSA_WITH_AES_128_CBC_SHA,TLS_RSA_WITH_AES_256_CBC_SHA,TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA,TLS_RSA_WITH_CAMELLIA_256_CBC_SHA,TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA,TLS_RSA_WITH_CAMELLIA_128_CBC_SHA
# ===================================================================
server:
  port: 9443
  compression:
    enabled: true
    mime-types: text/html,text/xml,text/plain,text/css, application/javascript, application/json
    min-response-size: 1024
  ssl:
    key-store: classpath:config/tls/laptop-2iguatf5.p12
    key-store-password: S3cr3t!S
    key-alias: alias
    key-store-type: PKCS12

# ===================================================================
# JHipster specific properties
#
# Full reference is available at: https://www.jhipster.tech/common-application-properties/
# ===================================================================

jhipster:
  http:
    cache: # Used by the CachingHttpHeadersFilter
      timeToLiveInDays: 1461
  security:
    authentication:
      jwt:
        # This token must be encoded using Base64 and be at least 256 bits long (you can type `openssl rand -base64 64` on your command line to generate a 512 bits one)
        # As this is the PRODUCTION configuration, you MUST change the default key, and store it securely:
        # - In the JHipster Registry (which includes a Spring Cloud Config server)
        # - In a separate `application-prod.yml` file, in the same folder as your executable JAR file
        # - In the `JHIPSTER_SECURITY_AUTHENTICATION_JWT_BASE64_SECRET` environment variable
        base64-secret: Yzg4YWZkN2NhMzcxOWUyOTFkMzM1M2M3MGEwNGY5MTdmM2RlZjQ1OTJjNzBhZDIwZjU0MzU3YTExOGEzMWY0M2E1ZWFlNDRjNjM1ZDFhNWUxYTk5MjhmM2Y2OGI5MDA2NWY0ZWQ0NmNiMmUxNmQ1MjU5YWQyMzE0MjA2YTliNTY=
        # Token is valid 24 hours
        token-validity-in-seconds: 86400
        token-validity-in-seconds-for-remember-me: 2592000
  mail: # specific JHipster mail property, for standard properties see MailProperties
    base-url: http://my-server-url-to-change # Modify according to your server's URL
  logging:
    use-json-format: false # By default, logs are not in Json format
    logstash: # Forward logs to logstash over a socket, used by LoggingConfiguration
      enabled: false
      host: localhost
      port: 5000

# ===================================================================
# Application specific properties
# ===================================================================
acme:
  proxy:
    # Required: Identification number of this proxy instance
    # ensure that it's unique if multiple proxies are in use
    id: 1

    # Required: Shared secret to authenticate the proxy and protect the connection to the ca3s server
    connection:
      secret: S3cr3t!S

    # For future use, only
    # connection protection key derivation options. Predefined, static values for now
#      salt:
#      iterations:
#      pbeAlgo:

    # Required: Provide the URL of the ca3s instance serving as ACME backend
    remote:
      server: http://localhost:9090

    headers:
      forward:
        # Define all headers that need to be forwarded to the ACME client
        # The header names in this property is case insensitive.
        # The default set is:
        # Location,Link,Replay-Nonce,Retry-After,Content-Type
#        response:

    dns:
      # Define a DNS resolver host used for validating the DNS challenge
      # The default resolver is the one used by the JVM
      # The resolver is not necessarily the same as the one used by the ca3s server!
#      server:

      # Define a specific port for a given DNS resolver
      # Default value is 53
#      port: 53

  challenge:
    # Define the number of worker threads checking the incoming challenges
    # DEfault value is 4
    threads: 4

    http:
      # Define a set of HTTP-01 ports checked for challenges
      # default if port 80
      ports: 80, 5544

      # Define the number of redirects followed
      # the default value is 0, no redirects were followed
      maxRedirects: 0

      # Define the value of milli seconds for connect, read and socket timeouts for HTTP-01 challenges
      # Too low values lead to missed responses, too high values slow down the server response in case
      # Default value is 1000 mSec
      timeoutMilliSec: 1000


    https:
      # Define a set of ALPN-01 ports checked for challenges
      # default if port 443
      ports: 443

