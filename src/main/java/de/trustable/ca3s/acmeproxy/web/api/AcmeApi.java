/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.4.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package de.trustable.ca3s.acmeproxy.web.api;


import de.trustable.ca3s.acmeproxy.service.api.dto.DirectoryResponse;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.ResponseEntity;
import org.springframework.util.MultiValueMap;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;

import javax.annotation.Generated;
import javax.validation.Valid;
import javax.validation.constraints.NotNull;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-03-27T13:33:05.045561200+02:00[Europe/Berlin]")
@Validated
@Tag(name = "account-controller", description = "the account-controller API")
public interface AcmeApi {

    default AcmeApiDelegate getDelegate() {
        return new AcmeApiDelegate() {};
    }

    /**
     * POST /acme/{realm}/acct/changeKey
     *
     * @param realm  (required)
     * @param body  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "changeKey",
        tags = { "account-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = Object.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/acme/{realm}/acct/changeKey",
        produces = { "*/*" },
        consumes = { "application/jose+json" }
    )
    default ResponseEntity<Object> changeKey(
        @Parameter(name = "realm", description = "", required = true, in = ParameterIn.PATH) @PathVariable("realm") String realm,
        @Parameter(name = "body", description = "", required = true) @Valid @RequestBody String body,
        @RequestHeader MultiValueMap<String, String> headers
    ) {
        return getDelegate().changeKey(realm, body, headers);
    }


    /**
     * POST /acme/{realm}/newOrder
     *
     * @param realm  (required)
     * @param body  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "consumingPostedJws1",
        tags = { "new-order-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = Object.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/acme/{realm}/newOrder",
        produces = { "*/*" },
        consumes = { "application/jws", "application/jose+json" }
    )
    default ResponseEntity<Object> consumingPostedJws1(
        @Parameter(name = "realm", description = "", required = true, in = ParameterIn.PATH) @PathVariable("realm") String realm,
        @Parameter(name = "body", description = "", required = true) @Valid @RequestBody String body,
        @RequestHeader MultiValueMap<String, String> headers
    ) {
        return getDelegate().consumingPostedJws1(realm, body, headers);
    }


    /**
     * POST /acme/{realm}/newAccount
     *
     * @param realm  (required)
     * @param body  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "consumingPostedJws2",
        tags = { "new-account-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = Object.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/acme/{realm}/newAccount",
        produces = { "*/*" },
        consumes = { "application/jws", "application/jose+json" }
    )
    default ResponseEntity<Object> consumingPostedJws2(
        @Parameter(name = "realm", description = "", required = true, in = ParameterIn.PATH) @PathVariable("realm") String realm,
        @Parameter(name = "body", description = "", required = true) @Valid @RequestBody String body,
        @RequestHeader MultiValueMap<String, String> headers
    ) {
        return getDelegate().consumingPostedJws2(realm, body, headers);
    }


    /**
     * POST /acme/{realm}/order/finalize/{orderId}
     *
     * @param orderId  (required)
     * @param realm  (required)
     * @param body  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "finalizeOrder",
        tags = { "order-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/acme/{realm}/order/finalize/{orderId}",
        produces = { "application/json" },
        consumes = { "application/jose+json" }
    )
    default ResponseEntity<Object> finalizeOrder(
        @Parameter(name = "orderId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("orderId") Long orderId,
        @Parameter(name = "realm", description = "", required = true, in = ParameterIn.PATH) @PathVariable("realm") String realm,
        @Parameter(name = "body", description = "", required = true) @Valid @RequestBody String body,
        @RequestHeader MultiValueMap<String, String> headers
    ) {
        return getDelegate().finalizeOrder(orderId, realm, body, headers);
    }


    /**
     * POST /acme/{realm}/acct/{accountId}/orders
     *
     * @param accountId  (required)
     * @param realm  (required)
     * @param body  (required)
     * @param cursor  (optional, default to 0)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "getAccountOrders",
        tags = { "account-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = Object.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/acme/{realm}/acct/{accountId}/orders",
        produces = { "*/*" },
        consumes = { "application/jose+json" }
    )
    default ResponseEntity<Object> getAccountOrders(
        @Parameter(name = "accountId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("accountId") Long accountId,
        @Parameter(name = "realm", description = "", required = true, in = ParameterIn.PATH) @PathVariable("realm") String realm,
        @Parameter(name = "body", description = "", required = true) @Valid @RequestBody String body,
        @Parameter(name = "cursor", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "cursor", required = false, defaultValue = "0") String cursor,
        @RequestHeader MultiValueMap<String, String> headers
    ) {
        return getDelegate().getAccountOrders(accountId, realm, body, cursor, headers);
    }


    /**
     * GET /acme/{realm}/authorization/{authorizationId}
     *
     * @param authorizationId  (required)
     * @param realm  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "getAuthorization",
        tags = { "authorization-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/acme/{realm}/authorization/{authorizationId}",
        produces = { "application/json" }
    )
    default ResponseEntity<Object> getAuthorization(
        @Parameter(name = "authorizationId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("authorizationId") Long authorizationId,
        @Parameter(name = "realm", description = "", required = true, in = ParameterIn.PATH) @PathVariable("realm") String realm
    ) {
        return getDelegate().getAuthorization(authorizationId, realm);
    }


    /**
     * GET /acme/{realm}/cert/{certId}
     *
     * @param certId  (required)
     * @param realm  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "getCertificatePKIX",
        tags = { "acme-certificate-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = Object.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/acme/{realm}/cert/{certId}",
        produces = { "*/*" }
    )
    default ResponseEntity<Object> getCertificatePKIX(
        @Parameter(name = "certId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("certId") Long certId,
        @Parameter(name = "realm", description = "", required = true, in = ParameterIn.PATH) @PathVariable("realm") String realm
    ) {
        return getDelegate().getCertificatePKIX(certId, realm);
    }


    /**
     * GET /acme/{realm}/challenge/{challengeId}
     *
     * @param challengeId  (required)
     * @param realm  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "getChallenge",
        tags = { "challenge-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/acme/{realm}/challenge/{challengeId}",
        produces = { "application/json" }
    )
    default ResponseEntity<Object> getChallenge(
        @Parameter(name = "challengeId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("challengeId") Long challengeId,
        @Parameter(name = "realm", description = "", required = true, in = ParameterIn.PATH) @PathVariable("realm") String realm
    ) {
        return getDelegate().getChallenge(challengeId, realm);
    }


    /**
     * GET /acme/{realm}/directory
     *
     * @param realm  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "getDirectory",
        tags = { "directory-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = DirectoryResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/acme/{realm}/directory",
        produces = { "application/json" }
    )
    default ResponseEntity<DirectoryResponse> getDirectory(
        @Parameter(name = "realm", description = "", required = true, in = ParameterIn.PATH) @PathVariable("realm") String realm
    ) {
        return getDelegate().getDirectory(realm);
    }


    /**
     * POST /acme/{realm}/directory
     *
     * @param realm  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "getDirectory1",
        tags = { "directory-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = DirectoryResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/acme/{realm}/directory",
        produces = { "application/json" }
    )
    default ResponseEntity<DirectoryResponse> getDirectory1(
        @Parameter(name = "realm", description = "", required = true, in = ParameterIn.PATH) @PathVariable("realm") String realm
    ) {
        return getDelegate().getDirectory1(realm);
    }


    /**
     * POST /acme/{realm}/order/{orderId}
     *
     * @param orderId  (required)
     * @param realm  (required)
     * @param body  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "postAsGetOrder",
        tags = { "order-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/acme/{realm}/order/{orderId}",
        produces = { "application/json" },
        consumes = { "application/jose+json" }
    )
    default ResponseEntity<Object> postAsGetOrder(
        @Parameter(name = "orderId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("orderId") Long orderId,
        @Parameter(name = "realm", description = "", required = true, in = ParameterIn.PATH) @PathVariable("realm") String realm,
        @Parameter(name = "body", description = "", required = true) @Valid @RequestBody String body,
        @RequestHeader MultiValueMap<String, String> headers
    ) {
        return getDelegate().postAsGetOrder(orderId, realm, body, headers);
    }


    /**
     * POST /acme/{realm}/authorization/{authorizationId}
     *
     * @param authorizationId  (required)
     * @param realm  (required)
     * @param body  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "postAuthorization",
        tags = { "authorization-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/acme/{realm}/authorization/{authorizationId}",
        produces = { "application/json" },
        consumes = { "application/jose+json" }
    )
    default ResponseEntity<Object> postAuthorization(
        @Parameter(name = "authorizationId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("authorizationId") Long authorizationId,
        @Parameter(name = "realm", description = "", required = true, in = ParameterIn.PATH) @PathVariable("realm") String realm,
        @Parameter(name = "body", description = "", required = true) @Valid @RequestBody String body,
        @RequestHeader MultiValueMap<String, String> headers
    ) {
        return getDelegate().postAuthorization(authorizationId, realm, body, headers);
    }


    /**
     * POST /acme/{realm}/challenge/{challengeId}
     *
     * @param challengeId  (required)
     * @param realm  (required)
     * @param body  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "postChallenge",
        tags = { "challenge-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/acme/{realm}/challenge/{challengeId}",
        produces = { "application/json" },
        consumes = { "application/jose+json" }
    )
    default ResponseEntity<Object> postChallenge(
        @Parameter(name = "challengeId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("challengeId") Long challengeId,
        @Parameter(name = "realm", description = "", required = true, in = ParameterIn.PATH) @PathVariable("realm") String realm,
        @Parameter(name = "body", description = "", required = true) @Valid @RequestBody String body,
        @RequestHeader MultiValueMap<String, String> headers
    ) {
        return getDelegate().postChallenge(challengeId, realm, body, headers);
    }


    /**
     * POST /acme/{realm}/cert/{certId}
     *
     * @param contentType  (required)
     * @param certId  (required)
     * @param realm  (required)
     * @param body  (required)
     * @param accept  (optional, default to application/pem-certificate-chain)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "retrieveCertificate",
        tags = { "acme-certificate-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = Object.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/acme/{realm}/cert/{certId}",
        produces = { "*/*" },
        consumes = { "application/jose+json", "application/pkix-cert" }
    )
    default ResponseEntity<?> retrieveCertificate(
        @NotNull @Parameter(name = "Content-Type", description = "", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "Content-Type", required = true) String contentType,
        @Parameter(name = "certId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("certId") Long certId,
        @Parameter(name = "realm", description = "", required = true, in = ParameterIn.PATH) @PathVariable("realm") String realm,
        @Parameter(name = "body", description = "", required = true) @Valid @RequestBody String body,
        @Parameter(name = "Accept", description = "", in = ParameterIn.HEADER) @RequestHeader(value = "Accept", required = false, defaultValue = "application/pem-certificate-chain") String accept,
        @RequestHeader MultiValueMap<String, String> headers
    ) {
        return getDelegate().retrieveCertificate(contentType, certId, realm, body, accept, headers);
    }


    /**
     * POST /acme/{realm}/cert/revoke
     *
     * @param realm  (required)
     * @param body  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "revokeCertificate",
        tags = { "acme-certificate-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = Object.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/acme/{realm}/cert/revoke",
        produces = { "*/*" },
        consumes = { "application/jose+json" }
    )
    default ResponseEntity<?> revokeCertificate(
        @Parameter(name = "realm", description = "", required = true, in = ParameterIn.PATH) @PathVariable("realm") String realm,
        @Parameter(name = "body", description = "", required = true) @Valid @RequestBody String body,
        @RequestHeader MultiValueMap<String, String> headers
    ) {
        return getDelegate().revokeCertificate(realm, body, headers);
    }


    /**
     * POST /acme/{realm}/acct/{accountId}
     *
     * @param accountId  (required)
     * @param realm  (required)
     * @param body  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "updateAccount",
        tags = { "account-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = Object.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/acme/{realm}/acct/{accountId}",
        produces = { "*/*" },
        consumes = { "application/jose+json" }
    )
    default ResponseEntity<?> updateAccount(
        @Parameter(name = "accountId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("accountId") Long accountId,
        @Parameter(name = "realm", description = "", required = true, in = ParameterIn.PATH) @PathVariable("realm") String realm,
        @Parameter(name = "body", description = "", required = true) @Valid @RequestBody String body,
        @RequestHeader MultiValueMap<String, String> headers
    ) {
        return getDelegate().updateAccount(accountId, realm, body, headers);
    }


    /**
     * GET /acme/{realm}/newNonce
     *
     * @param realm  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "viaGet",
        tags = { "new-nonce-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = String.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/acme/{realm}/newNonce",
        produces = { "*/*" }
    )
    default ResponseEntity<String> viaGet(
        @Parameter(name = "realm", description = "", required = true, in = ParameterIn.PATH) @PathVariable("realm") String realm
    ) {
        return getDelegate().viaGet(realm);
    }

    /**
     * POST /acme/{realm}/newNonce
     *
     * @param realm  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "viaPost",
        tags = { "new-nonce-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = String.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/acme/{realm}/newNonce",
        produces = { "*/*" }
    )
    default ResponseEntity<String> viaPost(
        @Parameter(name = "realm", description = "", required = true, in = ParameterIn.PATH) @PathVariable("realm") String realm
    ) {
        return getDelegate().viaPost(realm);
    }

    /**
     * HEAD /acme/{realm}/newNonce
     *
     * @param realm  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "viaHead",
        tags = { "new-nonce-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = String.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.HEAD,
        value = "/acme/{realm}/newNonce",
        produces = { "*/*" }
    )
    default ResponseEntity<String> viaHead(
        @Parameter(name = "realm", description = "", required = true, in = ParameterIn.PATH) @PathVariable("realm") String realm
    ) {
        return getDelegate().viaHead(realm);
    }
}
